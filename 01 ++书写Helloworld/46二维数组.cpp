#include<iostream>
using namespace std;


int main() {
	/*
	二维数组定义的四种方式：

	数据类型 数组名[ 行数 ][ 列数 ];
	数据类型 数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };
	数据类型 数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};
	数据类型 数组名[ ][ 列数 ] = { 数据1，数据2，数据3，数据4};
	*/

	//方式1  
	//数组类型 数组名 [行数][列数]
	int arr1[2][3];  //定义一个两行三列数据
	arr1[0][0] = 1;
	arr1[0][1] = 2;
	arr1[0][2] = 3;//矩阵（1，2）元素
	arr1[1][0] = 4;
	arr1[1][1] = 5;
	arr1[1][2] = 6;

	cout << " arr1[2][3]的数据是" << endl;

	for (int i = 0; i < 2; i++) //打印数据方法
	{
		for (int j = 0; j < 3; j++)
		{
			cout << arr1[i][j] << " ";
		}
		cout << endl;
	}

	//方式2，建议，最直观
	//数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };
	int arr2[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};

	//方式3
	//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };，可以直接挪上去
	int arr3[2][3] = { 1,2,3,4,5,6 };

	//方式4 
	//数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };
	int arr4[][3] = { 1,2,3,4,5,6 };//三列，可以自动推算出几行；不能只剩行数



/*
二维数组数组名用途：
	查看二维数组所占内存空间
	获取二维数组首地址
*/
//二维数组数组名
	int arr[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};
	cout << "" << endl;
	cout << "二维数组大小： " << sizeof(arr) << endl;//24，一个int占4个字节，共六个数；若改成double，为48
	cout << "二维数组第一行所占字节大小： " << sizeof(arr[0]) << endl;
	cout << "二维数组第一个元素所占字节大小： " << sizeof(arr[0][0]) << endl;

	cout << "二维数组行数： " << sizeof(arr) / sizeof(arr[0]) << endl;//总共除以每一行占用
	cout << "二维数组列数： " << sizeof(arr[0]) / sizeof(arr[0][0]) << endl; //一行除以每个元素所占空间

	//地址
	cout << "二维数组首地址：" << arr << endl;//十六进制，加int转为十进制
	cout << "二维数组第一行地址：" << arr[0] << endl;
	cout << "二维数组第二行地址：" << arr[1] << endl;

	cout << "二维数组第一个元素地址：" << &arr[0][0] << endl; //查看元素首地址要加个&，和一维数组一样
	cout << "二维数组第二个元素地址：" << &arr[0][1] << endl;

	return 0;
}