#include<iostream>
using namespace std;

//数组:一个集合，放在一个连续的内存空间中，里面存放了相同类型的数据元素

/*
一维数组定义的三种方式：
定义数组时可以不指定长度，但必须有一个初始长度
数据类型 数组名[ 数组长度 ]; //数组名是自己取的，第一位是零，通过下标访问数组中的元素
数据类型 数组名[ 数组长度 ] = { 值1，值2 ...};
数据类型 数组名[ ] = { 值1，值2 ...};
*/

int main41() {

	//定义方式一
	int score1[10]; //数组名为score，里面有10个元素

	//利用下标赋值
	score1[0] = 10; //第一个元素是10
	score1[1] = 9;
	score1[2] = 8;

	//利用下标输出	
	cout << score1[2] << endl;
	cout << endl; //输出score1[3]会出错


	//定义方式二
	
	int score2[10] = {10,9,8,7,6,5,4,3,2};//如果{}内不足10个数据，剩余数据用0补全

	//访问数组中全部元素可以利用循环进行输出
	for (int i = 0; i < 10; i++)
	{
		cout << score2[i] << endl;
	}
	cout << endl;


	//定义方式三
	int score3[] = { 10,9,8,7,6,5,4,3,2,1 };//可以不指定出数组长度

	cout << score3[9] << endl;
	cout << endl;

//数组名用途:
	//1、可以获取整个数组占用内存空间大小

	cout << "整个数组所占内存空间为： " << sizeof(score3) << endl;
	//这个结果是40，因为一个整型占四个字节，一共十个数
	cout << "每个元素所占内存空间为： " << sizeof(score3[0]) << endl;//第一个元素
	cout << "数组的元素个数为： " << sizeof(score3) / sizeof(score3[0]) << endl;//整个数组所占内存空间除以每个元素所占内存空间就是数组个数

	//2、可以通过数组名获取到数组首地址
	cout << "数组首地址为： " << (int)score3 << endl;//不加int是个十六进制的数
	cout << "数组中第一个元素地址为： " << (int)&score3[0] << endl; //查看元素首地址要加个&，第一个元素就是数组首地址
	cout << "数组中第二个元素地址为： " << (int)&score3[1] << endl;//查了四个字节

	//score3 = 100; 错误，数组名是常量，因此不可以赋值

	return 0;
}

